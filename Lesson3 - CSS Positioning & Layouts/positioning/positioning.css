/*********** Positioning ***********/
/*
    Positioning in CSS is used to set an element at a particular position on the page.
    There are 5 modes of positioning:
        - position: static 
        - position: relative
        - position: absolute
        - position: fixed
        - position: sticky
    All elements have position set to static by default so you can ignore the static mode for now.
    
    To position an element, we set a positioning mode then we change the element's position using the following properties:
        - "top: ...px" => distance from the top.
        - "bottom: ...px" => distance from the bottom.
        - "left: ...px" => distance from the left.
        - "right: ...px" => distance from the right.
    You might ask "distance relative to what ?" and that depends on the positioning mode, see the following examples to understand.
*/

/* 
    Relative Positioning: 
    In this mode, the element is positioned relative to itself, which means:
        - "top: " => distance from the top of the element.
        - "bottom: " => distance from the bottom of the element.
        - "left: " => distance from the left of the element.
        - "right: " => distance from the right of the element.

    Below we have a selector for an element:
    1) Add "position: relative;" to the element.
    2) The element now has relative position, try adding one of these and see how the position changes each time:
        - "top: 100px;"
        - "bottom: 50px;"
        - "left: 80px;"
        - "right: 200px;"
    (Note: don't use top and bottom together, and don't use right and left together)
    3) Play around with the positioning.
    
    Note that other elements don't change their position and the initial spot of the positioned element stays empty, 
    this means it's still part of the document flow.
*/
#relative .inner-box:nth-of-type(1) {
}






/* 
    Absolute Positioning: 
    In this mode, the element is positioned relative to its first positioned parent (the first parent that has a positioned property != static), for example:
        <body>
            <div class="header" style="position: relative;">
                <div class="branding">
                    <img style="position: absolute;" />
                </div>
            </div>
        </body>
    Here, we check the first parent of <img> which is <div class="branding">, it is not positioned so we move to the next one which
    is <div class="header"> which is positioned, so the <img /> is positioned relative to <div class="header">.

        - "top: " => distance from the top of the first positioned parent.
        - "bottom: " => distance from the bottom of the first positioned parent.
        - "left: " => distance from the left of the first positioned parent.
        - "right: " => distance from the right of the first positioned parent.

    Below we have 2 selectors, the first one for an element and the second one for its direct parent.
    1) Add "position: absolute;" to the element.
    2) The element now has absolute position, try adding this:
        - "top: 0; left: 0;"
    Notice how the element jumps to the top, this is because none if it's parents are positioned, so it is positioned relative to the <html> element (root container).
    Now, try adding "position: relative;" to the parent and see how the positioning changes, the element is now positioned relative to the parent.
    3) Play around with the positioning.

    Note that other elements have changed their position (as if the positioned element doesn't exist anymore) and the element is not block level anymore,
    which means it is no longer part of the document flow.
*/
#absolute .box .inner-box:nth-of-type(1) {
}

#absolute .box {
}






/* 
    Fixed Positioning: 
    In this mode, the element is positioned relative to the viewport (the web screen).
        - "top: " => distance from the top of the viewport.
        - "bottom: " => distance from the bottom of the viewport.
        - "left: " => distance from the left of the viewport.
        - "right: " => distance from the right of the viewport.

    Below we have a selector for an element:
    1) Add "position: fixed;" to the element.
    2) Add "top: 0; left: 0;" and see where the element is positioned.
    3) Now scroll down the page and notice how the element stays in the same position.
    4) Play around with the positioning.

    Note that other elements have changed their position (as if the positioned element doesn't exist anymore) and the element is not block level anymore,
    which means it is no longer part of the document flow.
*/
#fixed .box .inner-box:nth-of-type(1) {
}






/* 
    YOU CAN SKIP THIS IT IS NOT TOO IMPORTANT, SO NO PROBLEM IF YOU DON'T UNDERSTAND IT WELL.

    Sticky Positioning: 
    In this mode, the element is positioned relative to its first scolling parent (scrolling = has a scroll bar).
        - "top: " => distance from the top of the first scolling parent.
        - "bottom: " => distance from the bottom of the first scolling parent. 
        - "left: " => distance from the left of the first scolling parent.
        - "right: " => distance from the right of the first scolling parent.  
    
    The only difference to fixed positioning is that the element sticks to the top of the screen when we scroll down, let's see this in action.
    Below we have a selector for an element:
    1) Add "position: fixed;" to the element.
    2) Add "top: 0; left: 0;" and see where the element is positioned.
    3) Try changing to "top: 100px; left: 100px;" and see where the element is positioned.
    4) Now scroll down the page and notice how the element sticks to the top of the page.
    5) Play around with the positioning.

    Note that other elements don't change their position and the initial spot of the positioned element stays empty, 
    this means it's still part of the document flow.
*/
#sticky {
}






/*
    Z-Index:
    Here the two inner boxes are overlaping, what if we want to specify which on appears on top of the other ?
    This is where the z-index property comes in (z-index as in index on the z axis), the element with the higher z-index is set on top.
    By default, all POSITIONED elements have a z-index = 0.

    Below we have 2 selectors for two elements that are overlapping:
    1) Add "z-index: 10;" to the first box and "z-index: 20;" to the second box and see what happens.
    2) Now add "z-index: 20;" to the first box and "z-index: 10;" to the second box and see what happens.
*/
#z-index .box .inner-box:first-child {
    position: relative;
    top: 20px;
}

#z-index .box .inner-box:last-child {
    position: relative;
    bottom: 20px;
}
